// Generated by gencpp from file avatar_msg/expresion.msg
// DO NOT EDIT!


#ifndef AVATAR_MSG_MESSAGE_EXPRESION_H
#define AVATAR_MSG_MESSAGE_EXPRESION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace avatar_msg
{
template <class ContainerAllocator>
struct expresion_
{
  typedef expresion_<ContainerAllocator> Type;

  expresion_()
    : exp()
    , au_ext()
    , it(0.0)
    , tt(0.0)  {
    }
  expresion_(const ContainerAllocator& _alloc)
    : exp(_alloc)
    , au_ext(_alloc)
    , it(0.0)
    , tt(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _exp_type;
  _exp_type exp;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _au_ext_type;
  _au_ext_type au_ext;

   typedef float _it_type;
  _it_type it;

   typedef float _tt_type;
  _tt_type tt;





  typedef boost::shared_ptr< ::avatar_msg::expresion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::avatar_msg::expresion_<ContainerAllocator> const> ConstPtr;

}; // struct expresion_

typedef ::avatar_msg::expresion_<std::allocator<void> > expresion;

typedef boost::shared_ptr< ::avatar_msg::expresion > expresionPtr;
typedef boost::shared_ptr< ::avatar_msg::expresion const> expresionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::avatar_msg::expresion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::avatar_msg::expresion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace avatar_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'avatar_msg': ['/home/disa/catkin_ws/src/avatar_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::avatar_msg::expresion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::avatar_msg::expresion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avatar_msg::expresion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::avatar_msg::expresion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avatar_msg::expresion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::avatar_msg::expresion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::avatar_msg::expresion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5171cc2831e9005bdc4c0ec061818bb";
  }

  static const char* value(const ::avatar_msg::expresion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5171cc2831e9005ULL;
  static const uint64_t static_value2 = 0xbdc4c0ec061818bbULL;
};

template<class ContainerAllocator>
struct DataType< ::avatar_msg::expresion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "avatar_msg/expresion";
  }

  static const char* value(const ::avatar_msg::expresion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::avatar_msg::expresion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string exp\n\
float32[] au_ext \n\
float32 it\n\
float32 tt\n\
\n\
";
  }

  static const char* value(const ::avatar_msg::expresion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::avatar_msg::expresion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exp);
      stream.next(m.au_ext);
      stream.next(m.it);
      stream.next(m.tt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct expresion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::avatar_msg::expresion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::avatar_msg::expresion_<ContainerAllocator>& v)
  {
    s << indent << "exp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.exp);
    s << indent << "au_ext[]" << std::endl;
    for (size_t i = 0; i < v.au_ext.size(); ++i)
    {
      s << indent << "  au_ext[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.au_ext[i]);
    }
    s << indent << "it: ";
    Printer<float>::stream(s, indent + "  ", v.it);
    s << indent << "tt: ";
    Printer<float>::stream(s, indent + "  ", v.tt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AVATAR_MSG_MESSAGE_EXPRESION_H
